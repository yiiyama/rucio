#!/usr/bin/env python

from __future__ import division
from __future__ import print_function

import sys
import logging
import argparse

from sqlalchemy import or_, and_
from sqlalchemy.sql import func

from rucio.core.rse import get_rse_id, get_rse_attribute, update_rse, add_rse_attribute, del_rse_attribute, get_rses_with_attribute
from rucio.core.rule import list_rules, update_rule
from rucio.core.rse_expression_parser import parse_expression
from rucio.common import exception
from rucio.common.config import config_get
from rucio.db.sqla import models
from rucio.db.sqla.session import read_session, transactional_session
from rucio.db.sqla.constants import DIDType

logging.basicConfig(stream=sys.stdout,
                    level=getattr(logging,
                                  config_get('common', 'loglevel',
                                             raise_exception=False,
                                             default='DEBUG').upper()),
                    format='%(asctime)s\t%(process)d\t%(levelname)s\t%(message)s')

def get_parser():
    """
    Returns the argparse parser.
    """
    parser = argparse.ArgumentParser(description='First step for writing a decommissioning agent.')
    parser.add_argument('--rse', dest='rses', action='store', nargs='+', default=[], help='RSE to decommission')
    parser.add_argument('--max-replicas', dest='max_replicas', action='store', type=int, default=-1, help='Maximum number of replicas to delete per cycle.')
    parser.add_argument('--max-rules', dest='max_rules', action='store', type=int, default=-1, help='Maximum number of rules to delete per cycle.')
    parser.add_argument('--max-datasets', dest='max_datasets', action='store', type=int, default=-1, help='Maximum number of datasets to delete per cycle.')
    #parser.add_argument('--dry-run', action='store_true', help='Dry run')
    parser.add_argument('--run', action='store_true', help='Actually run')
    return parser


class DecommissioningConfig(object):
    # Profile options
    JUST_DELETE, MOVE = range(2)

    def __init__(self, profile, **kwargs):
        if profile == 'just_delete':
            self.profile = self.JUST_DELETE
        elif profile == 'move':
            self.profile = self.MOVE
        else:
            self.profile = profile
        
        if self.profile == self.JUST_DELETE:
            try:
                self.max_replicas = kwargs['max_replicas']
                self.max_rules = kwargs['max_rules']
                self.max_datasets = kwargs['max_datasets']
            except KeyError:
                raise exception.ConfigurationError('Need max_replicas, max_rules, max_datasets for profile just_delete')
                
        else:
            pass


class DeletionLimitExceeded(Exception):
    def __init__(self, what, limit, count):
        self.what = what
        self.limit = limit
        self.count = count
        
    def __str__(self):
        return 'number of deleted %s %s reached the limit %s' % (self.what, self.limit, self.count)


class LimitChecker(object):
    def __init__(self, config):
        self.config = config

        self.deleted_replicas = 0
        self.deleted_rules = 0
        self.deleted_datasets = 0
        
    def increment(self, replicas=0, rules=0, datasets=0):
        self.deleted_replicas += replicas
        self.deleted_rules += rules
        self.deleted_datasets += datasets
        
        if self.config.max_replicas >= 0 and self.deleted_replicas >= self.config.max_replicas:
            raise DecommissionLimitExceeded('replicas', self.config.max_replicas, self.deleted_replicas)
        
        if self.config.max_rules >= 0 and self.deleted_rules >= self.config.max_rules:
            raise DecommissionLimitExceeded('rules', self.config.max_rules, self.deleted_rules)

        if self.config.max_datasets >= 0 and self.deleted_datasets >= self.config.max_datasets:
            raise DecommissionLimitExceeded('datasets', self.config.max_datasets, self.deleted_datasets)

    def any(self):
        return self.deleted_replicas != 0 or self.deleted_rules != 0 or self.deleted_datasets != 0
    

@transactional_session
def set_rse_availability(rse_id, log_header='', dry_run=False, session=None):
    """
    Get the RSE ready for decommissioning (availability and greedyDeletion)
    """
    
    # Set the RSE attributes
    for attr, value in [('availability_read', True), ('availability_write', False), ('availability_delete', True), ('greedyDeletion', True)]:
        current = get_rse_attribute(attr, rse_id=rse_id, session=session)
        if current == value:
            continue
            
        logging.debug('%(log_header)supdating attribute %(attr)s (%(current)s => %(value)s)' % locals())
        if not dry_run:
            update_rse(rse_id, {attr: value}, session=session)
            
            
@transactional_session
def mark_rse_as_done(rse_id, log_header='', dry_run=False, session=None):
    logging.debug('%(log_header)supdating attribute decommission to "complete"' % locals())
    if not dry_run:
        try:
            del_rse_attribute(rse_id, 'decommission', session=session)
        except:
            pass
        else:
            add_rse_attribute(rse_id, 'decommission', 'complete', session=session)

            
@read_session
def __container_to_datasets(scope, name, max_depth=0, _depth=0, session=None):
    """Flatten a container to a list of datasets.

    ``scope`` should be a ``str`` with the scope of the container.

    ``name`` should be a ``str`` with the name of the container.

    ``max_depth`` should be a positive ``int`` to limit the recursion depth (default: no limit).

    ``session`` should be an ``sqlalchemy.orm.session.Session``-like
    object.  If not provided, one will be created automatically.

    Returns a ``list`` of ``tuples``s (scope, name).
    """
    
    if max_depth > 0 and _depth > max_depth:
        raise RuntimeError('exceeded maximum depth')
        
    query = session.query(models.DataIdentifierAssociation.child_scope,
                          models.DataIdentifierAssociation.child_name,
                          models.DataIdentifierAssociation.child_type).\
        with_hint(models.DataIdentifierAssociation, "INDEX(CONTENTS CONTENTS_PK)", 'oracle').\
        filter(models.DataIdentifierAssociation.scope == scope,
               models.DataIdentifierAssociation.name == name,
               or_(models.DataIdentifierAssociation.child_type == DIDType.CONTAINER,
                   models.DataIdentifierAssociation.child_type == DIDType.DATASET))
    
    datasets = set()

    for child_scope, child_name, child_type in query.all():
        if child_type == DIDType.CONTAINER:
            datasets.update(__container_to_datasets(child_scope, child_name, max_depth, _depth + 1, session))
        elif row.child_type == DIDType.DATASET:
            datasets.add((child_scope, child_name))
            
    return datasets


@transactional_session
def delete_single_rse_rules(rse, rse_id, limit_check, log_header='', dry_run=False, session=None):
    """
    Delete rules with RSE expressions that consist only of the name of the given RSE.
    
    :param rse:          Name of the RSE.
    :param rse_id:       RSE ID.
    :param limit_check:  LimitChecker instance
    :param session:      The database session.
    """

    for rule in list_rules(filters={'rse_expression': rse}, session=session):
        rule_id = rule['id']
        scope = rule['scope']
        name = rule['name']
        did_type = rule['did_type']
        state = rule['state']

        if move_dest is None:
            logging.debug('%(log_header)sDeleting rule %(rule_id)s for dataset %(scope)s:%(name)s' % locals())
            if not dry_run:
                options = {'lifetime': 0, 'state': 'suspended', 'cancel_requests': True}
                update_rule(rule_id, options, session=session)
        else:
            pass
        
        # Increment the counters for throttling
        if did_type == DIDType.FILE:
            limit_check.increment(rules=1, replicas=1)

        elif did_type in [DIDType.DATASET, DIDType.CONTAINER]:
            # This DID is a dataset or a container
            # We count all the constituents regardless of the replication state to throttle on the maximum load
            if did_type == DIDType.DATASET:
                dataset_condition = [and_(models.DataIdentifier.scope == scope, models.DataIdentifier.name == name)]
            elif did_type == DIDType.CONTAINER:
                dataset_condition = []
                for d in __container_to_datasets(scope, name, session=session):
                    dataset_condition.append(and_(models.DataIdentifier.scope == d['scope'], models.DataIdentifier.name == d['name']))
                
            num_files = session.query(func.sum(models.DataIdentifier.length)).\
                filter(or_(*dataset_condition))
                
            # Finally increment the counters
            limit_check.increment(rules=1, datasets=len(dataset_condition), replicas=num_files)
            
        else:
            raise NotImplementedError('delete_single_rse_rules can handle FILE, DATASET, and CONTAINER types at the moment.')

@transactional_session
def process_multi_rse_rules(rse, rse_id, limit_check, log_header='', dry_run=False, session=None):
    """
    Find rules with RSE expressions involving the given RSE among others.
    """
    
    for rule in list_rules(session=session):
        for rse_info in parse_expression(rule['rse_expression'], session=session):
            if rse_info['rse'] == rse:
                # The rse_expression for this rule contains the current RSE among others
                logging.warning('%(log_header)sNontrivial rule for dataset %(scope)s:%(name)s. Deferring action' % locals())
                break


@transactional_session    
def decommission_rse_just_delete(rse, config, dry_run=False, session=None):
    try:
        rse_id = get_rse_id(rse, session=session, include_deleted=False)
    except exception.RSENotFound:
        logging.warning('RSE %(rse)s not found' % locals())
        return False
    
    limit_check = LimitChecker(config)
    
    log_header = 'RSE: %(rse)s -- ' % locals()

    try:
        # 1. Set RSE availability and greedyDeletion attributes
        logging.info('Decommissioning: Preparing RSE %(rse)s' % locals())

        set_rse_availability(rse_id, log_header=log_header, dry_run=dry_run, session=session)

        # 2. Delete rules where the RSE expression is the RSE itself
        delete_single_rse_rules(rse, rse_id, limit_check, log_header=log_header, dry_run=dry_run, session=session)

        # 3. Deal with rules with more complicated RSE expressions
        process_multi_rse_rules(rse, rse_id, limit_check, log_header=log_header, dry_run=dry_run, session=session)

        if limit_check.deleted_rules == 0:
            # 4. There were no rules to be deleted in this cycle - move on to final cleanup
            # delete_locks_with_no_rule()
            # delete_replicas_with_no_locks()
            pass
    
    except DeletionLimitExceeded as exc:
        reason = str(exc)
        logging.info('%(log_header)sStopping decommissioning cycle because %(reason)' % locals())
        return False

    if not limit_check.any():
        # Mark the RSE as decommissioning complete
        mark_rse_as_done(rse_id, log_header=log_header, dry_run=dry_run, session=session)
    
    return True


@transactional_session
def decommission_rse(rse, config, dry_run=False, session=None):
    """
    Set RSE attributes for decommissioning (read=True, write=False, delete=True).

    :param rse:      Name of the RSE.
    :param session:  The database session.
    """

    if config.profile == DecommissioningConfig.JUST_DELETE:
        decommission_rse_just_delete(rse, config, dry_run=dry_run, session=session)

    elif config.profile == DecommissioningConfig.MOVE:
        pass

    return True


def decommission_rses(rses=[],
                      profile=DecommissioningConfig.JUST_DELETE,
                      max_replicas=-1,
                      max_rules=-1,
                      max_datasets=-1,
                      dry_run=True):

    configs = {}
    
    # Loop over the RSEs with decommission attribute set
    for rse in get_rses_with_attribute('decommission'):
        if rse['decommission'] == 'complete':
            continue
                     
        rse_profile = rse['decommission']
        config_args = {}
            
        if rse_profile == 'just_delete':
            for v in ['replicas', 'rules', 'datasets']:
                try:
                    config_args['max_%s' % v] = rse['decommission_%s_per_run' % v]
                except KeyError:
                    config_args['max_%s' % v] = -1

        configs[rse['rse']] = DecommissioningConfig(rse_profile, **config_args)

    # Override by the function argument
    for rse in rses:
        config_args = {
            'profile': profile,
            'max_replicas': max_replicas,
            'max_rules': max_rules,
            'max_datasets': max_datasets
        }
            
        configs[rse] = DecommissioningConfig(rse, **config_args)
        
    logging.info('RSEs to decommission: %(configs)s' % locals())
     
    # Act on the RSEs
    for rse, config in configs.items():
        decommission_rse(rse, config, dry_run=dry_run)

        
if __name__ == "__main__":
    parser = get_parser()
    args = parser.parse_args()
    
    decommission_rses(rses=args.rses,
                      max_replicas=args.max_replicas,
                      max_rules=args.max_rules,
                      max_datasets=args.max_datasets,
                      dry_run=(not args.run))